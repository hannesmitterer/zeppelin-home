name: Optimized GitHub Pages Deployment

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Optimized build job
  build:
    runs-on: ubuntu-latest
    env:
      JEKYLL_ENV: production
      BUNDLE_WITHOUT: development
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching

      - name: Setup Ruby with enhanced caching
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Setup Pages configuration
        id: pages
        uses: actions/configure-pages@v5

      - name: Cache Jekyll build
        uses: actions/cache@v4
        with:
          path: |
            .jekyll-cache
            .sass-cache
          key: jekyll-build-${{ runner.os }}-${{ hashFiles('**/*.rb', '**/*.yml', '**/*.yaml', 'Gemfile*') }}
          restore-keys: |
            jekyll-build-${{ runner.os }}-

      - name: Build with Jekyll (optimized)
        run: |
          # Build with production optimizations
          bundle exec jekyll build \
            --baseurl "${{ steps.pages.outputs.base_path }}" \
            --profile \
            --strict_front_matter
        env:
          JEKYLL_ENV: production

      - name: Optimize assets
        run: |
          # Compress images if tools are available
          if command -v optipng &> /dev/null; then
            find _site -name "*.png" -exec optipng -quiet {} \;
          fi
          
          # Show build statistics
          echo "Built site statistics:"
          du -sh _site
          find _site -type f | wc -l | xargs echo "Total files:"

      - name: Upload optimized artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job - only run on push to main, not on PRs
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post-deployment notification
        if: success()
        run: |
          echo "âœ… Site successfully deployed to: ${{ steps.deployment.outputs.page_url }}"